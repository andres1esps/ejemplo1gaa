# Clases sin metodos, solo atributos
import datetime
import os


class Jugador:
    def __init__(self, nombre, victorias=0, derrotas=0, empates=0, partidas_jugadas=0, fecha_registro=""):
        self.nombre = nombre
        self.victorias = victorias
        self.derrotas = derrotas
        self.empates = empates
        self.partidas_jugadas = partidas_jugadas
        self.fecha_registro = fecha_registro

class Historial:
    def __init__(self):
        self.eventos = []

class Tablero:
    def __init__(self):
        self.casillas = [" "] * 9

# Registro de gestion de jugadores
def cargar_jugadores(archivo_jugadores):
    jugadores = {}
    if os.path.exists(archivo_jugadores):
        with open(archivo_jugadores, 'r', encoding='utf-8') as archivo:
            for linea in archivo:
                datos = linea.strip().split('|')
                nombre, victorias, derrotas, empates, partidas, fecha = datos
                jugadores[nombre] = Jugador(
                    nombre=nombre,
                    victorias=int(victorias),
                    derrotas=int(derrotas),
                    empates=int(empates),
                    partidas_jugadas=int(partidas),
                    fecha_registro=fecha
                )
    return jugadores

def guardar_jugadores(jugadores, archivo_jugadores):
    with open(archivo_jugadores, 'w', encoding='utf-8') as archivo:
        for jugador in jugadores.values():
            archivo.write(f"{jugador.nombre}|{jugador.victorias}|{jugador.derrotas}|"
                          f"{jugador.empates}|{jugador.partidas_jugadas}|{jugador.fecha_registro}\n")

def registrar_jugador(jugadores, nombre, archivo_jugadores):
    if nombre not in jugadores:
        jugadores[nombre] = Jugador(
            nombre=nombre,
            fecha_registro=datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        )
        guardar_jugadores(jugadores, archivo_jugadores)
        registrar_historial(f"Nuevo jugador registrado: {nombre}")
        return True
    return False

# historial
def cargar_historial(archivo_historial):
    historial = []
    if os.path.exists(archivo_historial):
        with open(archivo_historial, 'r', encoding='utf-8') as archivo:
            historial = archivo.readlines()
    return historial

def registrar_historial(evento, archivo_historial="historial.txt"):
    fecha = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(archivo_historial, 'a', encoding='utf-8') as archivo:
        archivo.write(f"{fecha} - {evento}\n")

# Funciones para el juego
def preparar_partida(jugadores, archivo_jugadores):
    print("\n=== REGISTRO DE JUGADORES ===")
    jugador_x = ""
    while not jugador_x:
        jugador_x = input("Nombre del Jugador X: ")
    registrar_jugador(jugadores, jugador_x, archivo_jugadores)

    jugador_o = ""
    while not jugador_o or jugador_o == jugador_x:
        jugador_o = input("Nombre del Jugador O (diferente a Jugador X): ")
    registrar_jugador(jugadores, jugador_o, archivo_jugadores)

    return jugador_x, jugador_o

def imprimir_tablero(tablero, jugador_x, jugador_o):
    print(f"\nJugador X: {jugador_x}")
    print(f"Jugador O: {jugador_o}\n")
    print(" 1 | 2 | 3     " + " | ".join(tablero.casillas[:3]))
    print("---+---+---    ---+---+---")
    print(" 4 | 5 | 6     " + " | ".join(tablero.casillas[3:6]))
    print("---+---+---    ---+---+---")
    print(" 7 | 8 | 9     " + " | ".join(tablero.casillas[6:]))
    print("\n")

def jugar(jugadores, jugador_x, jugador_o, tablero):
    jugador_actual = "X"
    jugando = True

    while jugando:
        imprimir_tablero(tablero, jugador_x, jugador_o)
        nombre_jugador_actual = jugador_x if jugador_actual == "X" else jugador_o
        movimiento = -1
        while movimiento not in range(1, 10) or tablero.casillas[movimiento - 1] != " ":
            try:
                movimiento = int(input(f"Jugador {jugador_actual} ({nombre_jugador_actual}), elige un espacio (1-9): "))
            except ValueError:
                continue

        tablero.casillas[movimiento - 1] = jugador_actual
        # Verificar ganador o empate
        # (Lógica similar a la anterior para determinar ganador o empate)
        # Aquí podrías implementar las funciones correspondientes.

        jugador_actual = "O" if jugador_actual == "X" else "X"

# Menu principal
def menu_principal():
    archivo_jugadores = "jugadores.txt"
    jugadores = cargar_jugadores(archivo_jugadores)

    seguir_jugando = True
    while seguir_jugando:
        print("\n=== MENÚ PRINCIPAL ===")
        print("1. Iniciar nueva partida")
        print("2. Ver ranking de jugadores")
        print("3. Buscar estadisticas de jugador")
        print("4. Ver historial")
        print("5. Salir")
        opcion = input("Seleccione una opción: ")

        if opcion == "1":
            jugador_x, jugador_o = preparar_partida(jugadores, archivo_jugadores)
            tablero = Tablero()
            jugar(jugadores, jugador_x, jugador_o, tablero)
        elif opcion == "2":
            pass  # Implementar mostrar ranking
        elif opcion == "3":
            pass  # Implementar búsqueda de estadísticas
        elif opcion == "4":
            historial = cargar_historial("historial.txt")
            print("Historial de eventos:\n", "".join(historial[-10:]))
        elif opcion == "5":
            seguir_jugando = False

if __name__ == "__main__":
    menu_principal()
